// This code was autogenerated from auth.proto, do not edit.
package authServiceNrpc

import (
	"context"
	"log"
	"time"
	"fmt"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/protobuf/proto"
	"github.com/nats-io/nats.go"
	github_com_golang_protobuf_ptypes_empty "github.com/golang/protobuf/ptypes/empty"
	"github.com/franklihub/nrpc"
)

// AuthServiceServer is the interface that providers of the service
// AuthService should implement.
type AuthServiceServer interface {
	Alive(ctx context.Context, req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error)
	AuthToken(ctx context.Context, req *AuthTokenReq) (*AuthTokenRes, error)
	RefreshToken(ctx context.Context, req *RefreshTokenReq) (*RefreshTokenRes, error)
	TokenInfo(ctx context.Context, req *TokenInfoReq) (*TokenInfoRes, error)
}

// AuthServiceHandler provides a NATS subscription handler that can serve a
// subscription using a given AuthServiceServer implementation.
type AuthServiceHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  AuthServiceServer

	encodings []string
}

func NewAuthServiceHandler(ctx context.Context, nc nrpc.NatsConn, s AuthServiceServer) *AuthServiceHandler {
	return &AuthServiceHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func NewAuthServiceConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s AuthServiceServer) *AuthServiceHandler {
	return &AuthServiceHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *AuthServiceHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *AuthServiceHandler) Subject() string {
	return "AuthService.>"
}

func (h *AuthServiceHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "AuthService", 0, msg.Subject)
	if err != nil {
		log.Printf("AuthServiceHanlder: AuthService subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "Alive":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AliveHanlder: Alive subject parsing failed: %v", err)
			break
		}
		var req github_com_golang_protobuf_ptypes_empty.Empty
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AliveHandler: Alive request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {

			ctx := context.Background()
			ctx = context.WithValue(ctx, "tracingMiddlewareHandled", 1)
			var (
				span trace.Span
				tr   = otel.GetTracerProvider().Tracer(
					"nrpc-trace",
					trace.WithInstrumentationVersion("v0.0.1"),
				)
			)
			ctx, span = tr.Start(
				otel.GetTextMapPropagator().Extract(
					ctx,
					propagation.HeaderCarrier(msg.Header),
				),
				msg.Subject,
				trace.WithSpanKind(trace.SpanKindServer),
			)
			span.SetAttributes(nrpc.CommonLabels()...)
			// Inject tracing context.
			request.Context = ctx
			/////
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.Alive(ctx, &req)
				defer span.End()
				if err != nil {
					span.SetStatus(codes.Error, fmt.Sprintf("%+v", err))
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AuthToken":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AuthTokenHanlder: AuthToken subject parsing failed: %v", err)
			break
		}
		var req AuthTokenReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AuthTokenHandler: AuthToken request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {

			ctx := context.Background()
			ctx = context.WithValue(ctx, "tracingMiddlewareHandled", 1)
			var (
				span trace.Span
				tr   = otel.GetTracerProvider().Tracer(
					"nrpc-trace",
					trace.WithInstrumentationVersion("v0.0.1"),
				)
			)
			ctx, span = tr.Start(
				otel.GetTextMapPropagator().Extract(
					ctx,
					propagation.HeaderCarrier(msg.Header),
				),
				msg.Subject,
				trace.WithSpanKind(trace.SpanKindServer),
			)
			span.SetAttributes(nrpc.CommonLabels()...)
			// Inject tracing context.
			request.Context = ctx
			/////
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.AuthToken(ctx, &req)
				defer span.End()
				if err != nil {
					span.SetStatus(codes.Error, fmt.Sprintf("%+v", err))
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RefreshToken":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RefreshTokenHanlder: RefreshToken subject parsing failed: %v", err)
			break
		}
		var req RefreshTokenReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RefreshTokenHandler: RefreshToken request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {

			ctx := context.Background()
			ctx = context.WithValue(ctx, "tracingMiddlewareHandled", 1)
			var (
				span trace.Span
				tr   = otel.GetTracerProvider().Tracer(
					"nrpc-trace",
					trace.WithInstrumentationVersion("v0.0.1"),
				)
			)
			ctx, span = tr.Start(
				otel.GetTextMapPropagator().Extract(
					ctx,
					propagation.HeaderCarrier(msg.Header),
				),
				msg.Subject,
				trace.WithSpanKind(trace.SpanKindServer),
			)
			span.SetAttributes(nrpc.CommonLabels()...)
			// Inject tracing context.
			request.Context = ctx
			/////
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RefreshToken(ctx, &req)
				defer span.End()
				if err != nil {
					span.SetStatus(codes.Error, fmt.Sprintf("%+v", err))
					return nil, err
				}
				return innerResp, err
			}
		}
	case "TokenInfo":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("TokenInfoHanlder: TokenInfo subject parsing failed: %v", err)
			break
		}
		var req TokenInfoReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("TokenInfoHandler: TokenInfo request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {

			ctx := context.Background()
			ctx = context.WithValue(ctx, "tracingMiddlewareHandled", 1)
			var (
				span trace.Span
				tr   = otel.GetTracerProvider().Tracer(
					"nrpc-trace",
					trace.WithInstrumentationVersion("v0.0.1"),
				)
			)
			ctx, span = tr.Start(
				otel.GetTextMapPropagator().Extract(
					ctx,
					propagation.HeaderCarrier(msg.Header),
				),
				msg.Subject,
				trace.WithSpanKind(trace.SpanKindServer),
			)
			span.SetAttributes(nrpc.CommonLabels()...)
			// Inject tracing context.
			request.Context = ctx
			/////
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.TokenInfo(ctx, &req)
				defer span.End()
				if err != nil {
					span.SetStatus(codes.Error, fmt.Sprintf("%+v", err))
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("AuthServiceHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("AuthServiceHandler: AuthService handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type AuthServiceClient struct {
	nc      nrpc.NatsConn
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewAuthServiceClient(nc nrpc.NatsConn) *AuthServiceClient {
	return &AuthServiceClient{
		nc:      nc,
		Subject: "AuthService",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *AuthServiceClient) Alive(
	ctx context.Context,req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error) {

	subject := c.Subject + "." + "Alive"
	////
	// otel trace
	tr := otel.GetTracerProvider().Tracer(
		"nrpc-trace",
		trace.WithInstrumentationVersion("v0.0.1"),
	)
	ctx, span := tr.Start(ctx, subject, trace.WithSpanKind(trace.SpanKindClient))
	defer span.End()
	span.SetAttributes(nrpc.CommonLabels()...)
	// call msg
	rawRequest, _ := nrpc.Marshal(c.Encoding, req)
	reqMsg := nats.NewMsg(subject)
	reqMsg.Data = rawRequest
	// Inject tracing content into  header.
	otel.GetTextMapPropagator().Inject(ctx, propagation.HeaderCarrier(reqMsg.Header))
	////
	// call
	var resp = github_com_golang_protobuf_ptypes_empty.Empty{}
	// if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
	if err := nrpc.CallMsg(ctx, reqMsg, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *AuthServiceClient) AuthToken(
	ctx context.Context,req *AuthTokenReq) (*AuthTokenRes, error) {

	subject := c.Subject + "." + "AuthToken"
	////
	// otel trace
	tr := otel.GetTracerProvider().Tracer(
		"nrpc-trace",
		trace.WithInstrumentationVersion("v0.0.1"),
	)
	ctx, span := tr.Start(ctx, subject, trace.WithSpanKind(trace.SpanKindClient))
	defer span.End()
	span.SetAttributes(nrpc.CommonLabels()...)
	// call msg
	rawRequest, _ := nrpc.Marshal(c.Encoding, req)
	reqMsg := nats.NewMsg(subject)
	reqMsg.Data = rawRequest
	// Inject tracing content into  header.
	otel.GetTextMapPropagator().Inject(ctx, propagation.HeaderCarrier(reqMsg.Header))
	////
	// call
	var resp = AuthTokenRes{}
	// if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
	if err := nrpc.CallMsg(ctx, reqMsg, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *AuthServiceClient) RefreshToken(
	ctx context.Context,req *RefreshTokenReq) (*RefreshTokenRes, error) {

	subject := c.Subject + "." + "RefreshToken"
	////
	// otel trace
	tr := otel.GetTracerProvider().Tracer(
		"nrpc-trace",
		trace.WithInstrumentationVersion("v0.0.1"),
	)
	ctx, span := tr.Start(ctx, subject, trace.WithSpanKind(trace.SpanKindClient))
	defer span.End()
	span.SetAttributes(nrpc.CommonLabels()...)
	// call msg
	rawRequest, _ := nrpc.Marshal(c.Encoding, req)
	reqMsg := nats.NewMsg(subject)
	reqMsg.Data = rawRequest
	// Inject tracing content into  header.
	otel.GetTextMapPropagator().Inject(ctx, propagation.HeaderCarrier(reqMsg.Header))
	////
	// call
	var resp = RefreshTokenRes{}
	// if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
	if err := nrpc.CallMsg(ctx, reqMsg, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *AuthServiceClient) TokenInfo(
	ctx context.Context,req *TokenInfoReq) (*TokenInfoRes, error) {

	subject := c.Subject + "." + "TokenInfo"
	////
	// otel trace
	tr := otel.GetTracerProvider().Tracer(
		"nrpc-trace",
		trace.WithInstrumentationVersion("v0.0.1"),
	)
	ctx, span := tr.Start(ctx, subject, trace.WithSpanKind(trace.SpanKindClient))
	defer span.End()
	span.SetAttributes(nrpc.CommonLabels()...)
	// call msg
	rawRequest, _ := nrpc.Marshal(c.Encoding, req)
	reqMsg := nats.NewMsg(subject)
	reqMsg.Data = rawRequest
	// Inject tracing content into  header.
	otel.GetTextMapPropagator().Inject(ctx, propagation.HeaderCarrier(reqMsg.Header))
	////
	// call
	var resp = TokenInfoRes{}
	// if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
	if err := nrpc.CallMsg(ctx, reqMsg, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

type Client struct {
	nc      nrpc.NatsConn
	defaultEncoding string
	defaultTimeout time.Duration
	AuthService *AuthServiceClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc: nc,
		defaultEncoding: "protobuf",
		defaultTimeout: 5*time.Second,
	}
	c.AuthService = NewAuthServiceClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.AuthService != nil {
		c.AuthService.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.AuthService != nil {
		c.AuthService.Timeout = t
	}
}